generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
}



model User {
  id           Int       @id @default(autoincrement())
  userId       String    @unique @default(uuid()) @map("user_id")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  email        String    @unique
  countryCode  String    @map("country_code") // e.g., "+1", "+44", "+91"
  phoneNumber  String    @map("phone_number")  // e.g., "2345678901"
  password     String
  refreshToken String?   @map("refresh_token")
  profilePic   String?   @map("profile_pic")
  status       Status    @default(PENDING)
  createdBy    Int?      @map("created_by")
  updatedBy    Int?      @map("updated_by")
  deletedAt    DateTime? @map("deleted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  userRoles    UserRole[]
  socialLogins SocialLogin[]
  audits       Audit[]

  // Unique constraint on country code + phone number combination
  @@unique([countryCode, phoneNumber], name: "unique_phone")
  @@map("users")
}

model Role {
  id        Int        @id @default(autoincrement())
  roleName  String     @unique @map("role_name")
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  userId Int  @map("user_id")
  roleId Int  @map("role_id")
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model SocialLogin {
  id           Int            @id @default(autoincrement())
  userId       Int            @map("user_id")
  user         User           @relation(fields: [userId], references: [id])
  provider     SocialProvider @map("provider")
  socialId     String         @map("social_id")
  socialEmail  String?        @map("social_email")
  displayName  String?        @map("display_name")
  firstName    String?        @map("first_name")
  lastName     String?        @map("last_name")
  avatarUrl    String?        @map("avatar_url")
  accessToken  String?        @map("access_token")
  refreshToken String?        @map("refresh_token")
  tokenExpiry  DateTime?      @map("token_expiry")
  isVerified   Boolean        @default(true) @map("is_verified")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  @@unique([provider, socialId])
  @@index([userId])
  @@index([socialEmail])
  @@map("social_logins")
}



model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique @map("key")
  value       String   @map("value")
  description String?  @map("description")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model Audit {
  id        String   @id @default(uuid())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  action    String
  model     String
  modelId   String   @map("model_id")
  changes   Json?
  duration  Int?
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("audits")
}