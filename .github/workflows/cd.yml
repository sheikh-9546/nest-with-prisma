name: CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true
          
      - name: Sign container image
        uses: sigstore/cosign-installer@v3
        
      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes {}@${{ steps.build.outputs.digest }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.your-domain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging with Helm
        uses: azure/k8s-deploy@v1
        with:
          namespace: staging
          manifests: |
            k8s/staging/deployment.yaml
            k8s/staging/service.yaml
            k8s/staging/ingress.yaml
          images: |
            ${{ needs.build-and-push.outputs.image-tag }}
        continue-on-error: false

      - name: Wait for deployment to be ready
        uses: jupyterhub/action-k8s-await-workloads@v3
        with:
          workloads: deployment/nest-app
          namespace: staging
          timeout: 300

      - name: Run health check
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 6
          retry_wait_seconds: 30
          command: |
            curl -f https://staging.your-domain.com/health || exit 1
            echo "‚úÖ Health check passed"

      - name: Notify deployment success
        run: |
          echo "‚úÖ Staging deployment successful!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://your-domain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          # Add your production deployment commands here
          # Examples:
          # - kubectl apply -f k8s/production/
          # - docker-compose -f docker-compose.production.yml up -d
          # - terraform apply -var-file="production.tfvars"
          # - ansible-playbook deploy-production.yml

      - name: Run health check
        run: |
          echo "üè• Running health check..."
          # Add health check commands here
          # curl -f https://your-domain.com/health || exit 1

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          # Add smoke test commands here

      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment successful!"

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back deployment..."
          # Add rollback commands here
          # kubectl rollout undo deployment/your-app
          # docker-compose down && docker-compose -f docker-compose.previous.yml up -d

      - name: Notify rollback
        run: |
          echo "‚ö†Ô∏è Deployment rolled back due to failure"

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Cleanup old container images
        run: |
          echo "üßπ Cleaning up old container images..."
          # Add cleanup commands here to remove old images from registry
          # This helps manage storage costs
