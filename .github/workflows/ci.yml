name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run all tests (ignore smart detection)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with annotations
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: '"{src,apps,libs,tests}/**/*.ts"'
          fail_on_error: true

      - name: Check Prettier formatting
        uses: actionsx/prettier@v3
        with:
          args: --check "src/**/*.ts" "tests/**/*.ts"

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Clear Jest cache
        run: npm run clear:cache

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            src/**/*.ts
            tests/**/*.spec.ts
          separator: " "

      - name: Run unit tests (smart detection)
        run: |
          echo "🧪 Running unit tests on Node.js ${{ matrix.node-version }}..."
          
          if [ "${{ github.event.inputs.run_full_tests }}" == "true" ]; then
            echo "🔄 Full test run requested manually..."
            npm run test:unit -- --verbose --detectOpenHandles
          elif [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
            echo "📁 Changed files detected:"
            echo "${{ steps.changed-files.outputs.all_changed_files }}"
            
            # Find corresponding test files for changed source files
            CHANGED_SRC_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
            TEST_FILES=""
            
            for file in $CHANGED_SRC_FILES; do
              if [[ $file == src/* ]]; then
                # Convert src/path/file.ts to tests/unit/path/file.spec.ts
                test_file=$(echo "$file" | sed 's|^src/|tests/unit/|' | sed 's|\.ts$|.spec.ts|')
                if [ -f "$test_file" ]; then
                  TEST_FILES="$TEST_FILES $test_file"
                  echo "✅ Found test: $test_file"
                fi
              elif [[ $file == tests/* ]]; then
                # If test file changed, include it directly
                TEST_FILES="$TEST_FILES $file"
                echo "✅ Test file: $file"
              fi
            done
            
            if [ -n "$TEST_FILES" ]; then
              echo "🎯 Running targeted tests for changed files..."
              npm run test:unit -- --verbose --detectOpenHandles --testPathPattern="$(echo $TEST_FILES | tr ' ' '|')"
            else
              echo "⚠️ No corresponding tests found for changed files, running all tests..."
              npm run test:unit -- --verbose --detectOpenHandles
            fi
          else
            echo "📝 No source/test files changed, running all tests..."
            npm run test:unit -- --verbose --detectOpenHandles
          fi
        env:
          NODE_ENV: test

      - name: Run test coverage
        run: |
          echo "📊 Generating test coverage report..."
          npm run test:coverage -- --detectOpenHandles
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Coverage comment
        uses: 5monkeys/cobertura-action@master
        if: github.event_name == 'pull_request'
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 75

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp development.env .env
          sed -i 's/DATABASE_URL=.*/DATABASE_URL="postgresql:\/\/postgres:postgres@localhost:5432\/nest_test"/' .env
          sed -i 's/REDIS_URL=.*/REDIS_URL=redis:\/\/localhost:6379/' .env
          sed -i 's/REDIS_HOST=.*/REDIS_HOST=localhost/' .env
          sed -i 's/REDIS_PORT=.*/REDIS_PORT=6379/' .env

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test

      - name: Seed database
        run: npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test

      - name: Get changed files for E2E
        id: changed-files-e2e
        uses: tj-actions/changed-files@v44
        with:
          files: |
            src/modules/**/*.ts
            src/controllers/**/*.ts
            src/**/controller.ts
            tests/e2e/**/*.spec.ts
          separator: " "

      - name: Run E2E tests (smart detection)
        run: |
          echo "🚀 Running End-to-End tests..."
          echo "Database: postgresql://postgres:postgres@localhost:5432/nest_test"
          echo "Redis: redis://localhost:6379"
          
          if [ "${{ github.event.inputs.run_full_tests }}" == "true" ]; then
            echo "🔄 Full E2E test run requested manually..."
            npm run test:e2e -- --verbose --detectOpenHandles --forceExit
          elif [ "${{ steps.changed-files-e2e.outputs.any_changed }}" == "true" ]; then
            echo "📁 Changed files that affect E2E tests:"
            echo "${{ steps.changed-files-e2e.outputs.all_changed_files }}"
            
            # Check if we should run specific E2E tests
            CHANGED_FILES="${{ steps.changed-files-e2e.outputs.all_changed_files }}"
            E2E_PATTERN=""
            
            for file in $CHANGED_FILES; do
              if [[ $file == *"auth"* ]]; then
                E2E_PATTERN="${E2E_PATTERN}auth|"
              elif [[ $file == *"user"* ]]; then
                E2E_PATTERN="${E2E_PATTERN}user|"
              elif [[ $file == *"role"* ]]; then
                E2E_PATTERN="${E2E_PATTERN}role|"
              elif [[ $file == tests/e2e/* ]]; then
                E2E_PATTERN="${E2E_PATTERN}$(basename $file .e2e-spec.ts)|"
              fi
            done
            
            if [ -n "$E2E_PATTERN" ]; then
              # Remove trailing |
              E2E_PATTERN=${E2E_PATTERN%|}
              echo "🎯 Running targeted E2E tests: $E2E_PATTERN"
              npm run test:e2e -- --verbose --detectOpenHandles --forceExit --testNamePattern="($E2E_PATTERN)"
            else
              echo "🔄 Running all E2E tests (no specific pattern matched)..."
              npm run test:e2e -- --verbose --detectOpenHandles --forceExit
            fi
          else
            echo "📝 No E2E-related files changed, running all E2E tests..."
            npm run test:e2e -- --verbose --detectOpenHandles --forceExit
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test
          REDIS_URL: redis://localhost:6379
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_ACCESS_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret-key

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            tests/e2e/screenshots/
            tests/e2e/logs/
          retention-days: 7

  test-development:
    name: Development Branch Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [test-unit, test-e2e]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nest_dev_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment for development
        run: |
          cp development.env .env.test
          sed -i 's/DATABASE_URL=.*/DATABASE_URL="postgresql:\/\/postgres:postgres@localhost:5432\/nest_dev_test"/' .env.test
          sed -i 's/REDIS_URL=.*/REDIS_URL=redis:\/\/localhost:6379/' .env.test
          sed -i 's/NODE_ENV=.*/NODE_ENV=test/' .env.test

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_dev_test

      - name: Seed test database
        run: npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_dev_test

      - name: Run integration tests
        run: |
          echo "🔄 Running integration tests for development branch..."
          npm run test:unit -- --testPathPattern="integration" --verbose
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_dev_test
          REDIS_URL: redis://localhost:6379

      - name: Run API tests
        run: |
          echo "🌐 Running API endpoint tests..."
          npm run test:e2e -- --testNamePattern="API" --verbose
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_dev_test
          REDIS_URL: redis://localhost:6379

      - name: Test database migrations rollback
        run: |
          echo "🔄 Testing migration rollback capability..."
          npx prisma migrate reset --force --skip-seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_dev_test

      - name: Generate development test report
        run: |
          echo "## 🧪 Development Branch Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Tests Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests across Node.js versions" >> $GITHUB_STEP_SUMMARY
          echo "- End-to-end tests with real database" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
          echo "- API endpoint tests" >> $GITHUB_STEP_SUMMARY
          echo "- Database migration rollback tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Ready for:" >> $GITHUB_STEP_SUMMARY
          echo "- Pull request to main branch" >> $GITHUB_STEP_SUMMARY
          echo "- Code review and deployment" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-unit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm security audit
        uses: oke-py/npm-audit-action@v2
        with:
          audit_level: moderate
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_assignees: ''
          issue_labels: security,dependencies
          dedupe_issues: true

      - name: Run audit CI with better reporting
        run: |
          npx audit-ci --config audit-ci.json --report-type json --output-file audit-report.json
          if [ $? -ne 0 ]; then
            echo "## 🚨 Security Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review and fix security vulnerabilities in dependencies." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 How to fix:" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`npm audit\` locally" >> $GITHUB_STEP_SUMMARY
            echo "2. Run \`npm audit fix\` to auto-fix" >> $GITHUB_STEP_SUMMARY
            echo "3. For manual fixes, run \`npm audit fix --force\`" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  prisma-checks:
    name: Prisma Schema Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Prisma schema
        run: npx prisma validate

      - name: Check Prisma format
        run: npx prisma format --check

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Check for schema drift
        run: |
          echo "🔍 Checking for Prisma schema drift..."
          if ! npx prisma migrate diff --from-migrations ./prisma/migrations --to-schema-datamodel ./prisma/schema.prisma --exit-code; then
            echo "## ⚠️ Prisma Schema Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your Prisma schema has changes that don't match the migrations." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 How to fix:" >> $GITHUB_STEP_SUMMARY
            echo "1. Create a new migration: \`npx prisma migrate dev --name describe-your-changes\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Or reset migrations: \`npx prisma migrate reset\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Review the migration before committing" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-unit, test-e2e, build, security, prisma-checks, type-check]
    if: always()
    
    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
                "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.test-e2e.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.prisma-checks.result }}" == "failure" || 
                "${{ needs.type-check.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline failed"
            exit 1
          else
            echo "✅ CI Pipeline succeeded"
          fi
