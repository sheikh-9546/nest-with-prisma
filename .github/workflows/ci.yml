name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with annotations
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: '"{src,apps,libs,tests}/**/*.ts"'
          fail_on_error: true

      - name: Check Prettier formatting
        uses: actionsx/prettier@v3
        with:
          args: --check "src/**/*.ts" "tests/**/*.ts"

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run unit tests
        run: npm run test:unit

      - name: Run test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Coverage comment
        uses: 5monkeys/cobertura-action@master
        if: github.event_name == 'pull_request'
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 75

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp development.env .env
          sed -i 's/DATABASE_URL=.*/DATABASE_URL="postgresql:\/\/postgres:postgres@localhost:5432\/nest_test"/' .env
          sed -i 's/REDIS_URL=.*/REDIS_URL=redis:\/\/localhost:6379/' .env
          sed -i 's/REDIS_HOST=.*/REDIS_HOST=localhost/' .env
          sed -i 's/REDIS_PORT=.*/REDIS_PORT=6379/' .env

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test

      - name: Seed database
        run: npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test
          REDIS_URL: redis://localhost:6379

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-unit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm security audit
        uses: oke-py/npm-audit-action@v2
        with:
          audit_level: moderate
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_assignees: ''
          issue_labels: security,dependencies
          dedupe_issues: true

      - name: Run audit CI with better reporting
        run: |
          npx audit-ci --config audit-ci.json --report-type json --output-file audit-report.json
          if [ $? -ne 0 ]; then
            echo "## üö® Security Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review and fix security vulnerabilities in dependencies." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß How to fix:" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`npm audit\` locally" >> $GITHUB_STEP_SUMMARY
            echo "2. Run \`npm audit fix\` to auto-fix" >> $GITHUB_STEP_SUMMARY
            echo "3. For manual fixes, run \`npm audit fix --force\`" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  prisma-checks:
    name: Prisma Schema Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Prisma schema
        run: npx prisma validate

      - name: Check Prisma format
        run: npx prisma format --check

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Check for schema drift
        run: |
          echo "üîç Checking for Prisma schema drift..."
          if ! npx prisma migrate diff --from-migrations ./prisma/migrations --to-schema-datamodel ./prisma/schema.prisma --exit-code; then
            echo "## ‚ö†Ô∏è Prisma Schema Drift Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your Prisma schema has changes that don't match the migrations." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß How to fix:" >> $GITHUB_STEP_SUMMARY
            echo "1. Create a new migration: \`npx prisma migrate dev --name describe-your-changes\`" >> $GITHUB_STEP_SUMMARY
            echo "2. Or reset migrations: \`npx prisma migrate reset\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Review the migration before committing" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run TypeScript type check
        run: npx tsc --noEmit

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-unit, test-e2e, build, security, prisma-checks, type-check]
    if: always()
    
    steps:
      - name: Check results
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
                "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.test-e2e.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.prisma-checks.result }}" == "failure" || 
                "${{ needs.type-check.result }}" == "failure" ]]; then
            echo "‚ùå CI Pipeline failed"
            exit 1
          else
            echo "‚úÖ CI Pipeline succeeded"
          fi
